package main

import (
	"encoding/hex"
	"errors"
	"log"
	"os"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/rpc"
)

const RPC_ADDR = "http://eth-mainnet.alchemyapi.io/v2/d8ZVAdW9XkTJkdIKRiVlvIvsAZdtlCkr"
const BYTE_CODE = "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638f82a65114610030575b600080fd5b61004a600480360381019061004591906102c3565b610060565b60405161005791906103f3565b60405180910390f35b6060600084905060008484905067ffffffffffffffff8111156100ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156100da5781602001602082028036833780820191505090505b50905060005b85859050811015610219578273ffffffffffffffffffffffffffffffffffffffff166370a08231878784818110610140577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610155919061029a565b6040518263ffffffff1660e01b815260040161017191906103d8565b60206040518083038186803b15801561018957600080fd5b505afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c1919061031b565b8282815181106101fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806102119061048a565b9150506100e0565b5080925050509392505050565b60008135905061023581610502565b92915050565b60008083601f84011261024d57600080fd5b8235905067ffffffffffffffff81111561026657600080fd5b60208301915083602082028301111561027e57600080fd5b9250929050565b60008151905061029481610519565b92915050565b6000602082840312156102ac57600080fd5b60006102ba84828501610226565b91505092915050565b6000806000604084860312156102d857600080fd5b60006102e686828701610226565b935050602084013567ffffffffffffffff81111561030357600080fd5b61030f8682870161023b565b92509250509250925092565b60006020828403121561032d57600080fd5b600061033b84828501610285565b91505092915050565b600061035083836103c9565b60208301905092915050565b6103658161044e565b82525050565b600061037682610425565b610380818561043d565b935061038b83610415565b8060005b838110156103bc5781516103a38882610344565b97506103ae83610430565b92505060018101905061038f565b5085935050505092915050565b6103d281610480565b82525050565b60006020820190506103ed600083018461035c565b92915050565b6000602082019050818103600083015261040d818461036b565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600061045982610460565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061049582610480565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104c8576104c76104d3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61050b8161044e565b811461051657600080fd5b50565b61052281610480565b811461052d57600080fd5b5056fea26469706673582212202f4e2e5ae91728b542362a76ed00966cd6dc8fd90ad92c329e5aa2b65232e24a64736f6c63430008000033"

var WETH_ADDR = common.HexToAddress("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2")
var V3_POOL_ADDRS = []common.Address{
	common.HexToAddress("0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8"),
	common.HexToAddress("0xcbcdf9626bc03e24f779434178a73a0b4bad62ed"),
	common.HexToAddress("0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"),
}

func main() {
	res, err := CallVirtualContract(RPC_ADDR, "./abis/BalanceGetter.abi", BYTE_CODE, "readBalances", WETH_ADDR, V3_POOL_ADDRS)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Result: %v", res[0])
}

const VIRTUAL_ADDRESS_HEX = "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF" // Could be randomly generated
func CallVirtualContract(rpcAddr string, abiPath string, byteCode string, functionName string, parameters ...interface{}) ([]interface{}, error) {
	client, err := rpc.Dial(RPC_ADDR)
	if err != nil {
		return nil, err
	}

	abiFile, err := os.Open(abiPath)
	if err != nil {
		return nil, err
	}

	virtualContractABI, err := abi.JSON(abiFile)
	if err != nil {
		return nil, err
	}

	functionCallData, err := virtualContractABI.Pack(functionName, parameters...)
	if err != nil {
		return nil, err
	}
	functionCallDataHex := hexutil.Encode(functionCallData)
	args := map[string]interface{}{
		"to":   VIRTUAL_ADDRESS_HEX,
		"data": functionCallDataHex,
	}

	override := map[string]interface{}{
		VIRTUAL_ADDRESS_HEX: map[string]string{
			"code": byteCode,
		},
	}

	var callResult interface{}
	err = client.Call(&callResult, "eth_call", args, "latest", override)
	if err != nil {
		return nil, err
	}

	callResultStr, ok := callResult.(string)
	if !ok {
		return nil, errors.New("failed to cast eth_call result to string")
	}
	callResultBytes, err := hex.DecodeString(callResultStr[2:])
	if err != nil {
		return nil, errors.New("failed to decode eth_call string to hex")
	}
	parsedResult, err := virtualContractABI.Unpack(functionName, callResultBytes)
	if err != nil {
		return nil, errors.New("failed to unpack result into ABI")
	}

	return parsedResult, nil
}
